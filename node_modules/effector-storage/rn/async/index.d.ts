import { Unit, Store, Event, Effect, Subscription } from 'effector'

interface StorageAdapter {
  <State>(key: string, update: (raw?: any) => any): {
    get(raw?: any, ctx?: any): State | Promise<State | undefined> | undefined
    set(value: State, ctx?: any): void
  }
  keyArea?: any
  noop?: boolean
}
interface StorageAdapterFactory<AdapterConfig> {
  (config?: AdapterConfig): StorageAdapter
  factory: true
}
type Contract<Data> =
  | ((raw: unknown) => raw is Data)
  | {
      isData: (raw: unknown) => raw is Data
      getErrorMessages: (raw: unknown) => string[]
    }
type Done<State> = {
  key: string
  keyPrefix: string
  operation: 'set' | 'get'
  value: State
}
type Fail<Err> = {
  key: string
  keyPrefix: string
  operation: 'set' | 'get'
  error: Err
  value?: any
}
type Finally<State, Err> =
  | (Done<State> & {
      status: 'done'
    })
  | (Fail<Err> & {
      status: 'fail'
    })
interface ConfigPersist$1 {
  pickup?: Unit<any>
  context?: Unit<any>
  keyPrefix?: string
  contract?: Contract<any>
}
interface ConfigCommon<State, Err = Error> {
  clock?: Unit<any>
  done?: Unit<Done<State>>
  fail?: Unit<Fail<Err>>
  finally?: Unit<Finally<State, Err>>
  pickup?: Unit<any>
  context?: Unit<any>
  key?: string
  keyPrefix?: string
  contract?: Contract<State | undefined>
}
interface ConfigJustStore<State> {
  store: Store<State>
}
interface ConfigJustSourceTarget<State> {
  source: Store<State> | Event<State> | Effect<State, any, any>
  target: Store<State> | Event<State> | Effect<State, any, any>
}
interface ConfigStore$1<State, Err = Error>
  extends ConfigCommon<State, Err>,
    ConfigJustStore<State> {}
interface ConfigSourceTarget$1<State, Err = Error>
  extends ConfigCommon<State, Err>,
    ConfigJustSourceTarget<State> {}

interface ConfigPersist extends ConfigPersist$1 {}
interface AsyncStorageConfig {
  serialize?: (value: any) => string
  deserialize?: (value: string) => any
}
interface ConfigStore<State, Err = Error>
  extends AsyncStorageConfig,
    ConfigStore$1<State, Err> {}
interface ConfigSourceTarget<State, Err = Error>
  extends AsyncStorageConfig,
    ConfigSourceTarget$1<State, Err> {}
interface Persist {
  <State, Err = Error>(config: ConfigSourceTarget<State, Err>): Subscription
  <State, Err = Error>(config: ConfigStore<State, Err>): Subscription
}
declare function async(config?: AsyncStorageConfig): StorageAdapter
declare namespace async {
  var factory: true
}
/**
 * Creates custom partially applied `persist`
 * with predefined `AsyncStorage` adapter
 *
 * @deprecated use @effector-storage/react-native-async-storage instead
 */
declare function createPersist(defaults?: ConfigPersist): Persist
/**
 * Default partially applied `persist`
 *
 * @deprecated use @effector-storage/react-native-async-storage instead
 */
declare const persist: Persist

export {
  AsyncStorageConfig,
  ConfigPersist,
  ConfigSourceTarget,
  ConfigStore,
  Contract,
  Done,
  Fail,
  Finally,
  Persist,
  StorageAdapter,
  StorageAdapterFactory,
  async,
  createPersist,
  persist,
}
