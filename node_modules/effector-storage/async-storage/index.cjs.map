{"version":3,"file":"index.cjs","sources":["../../src/async-storage/index.ts"],"sourcesContent":["import type { StorageAdapter } from '../types'\n\nexport interface AsyncStorage {\n  getItem: (key: string) => Promise<string | null>\n  setItem: (key: string, value: string) => Promise<void>\n}\n\nexport interface AsyncStorageConfig {\n  storage: () => AsyncStorage\n  serialize?: (value: any) => string\n  deserialize?: (value: string) => any\n}\n\n/**\n * Creates generic `AsyncStorage` adapter\n */\nasyncStorage.factory = true as const\nexport function asyncStorage({\n  storage,\n  serialize = JSON.stringify,\n  deserialize = JSON.parse,\n}: AsyncStorageConfig): StorageAdapter {\n  const adapter: StorageAdapter = <State>(key: string) => ({\n    async get() {\n      const item = await storage().getItem(key)\n      return item === null ? undefined : deserialize(item)\n    },\n\n    async set(value: State) {\n      await storage().setItem(key, serialize(value))\n    },\n  })\n\n  try {\n    adapter.keyArea = storage()\n  } catch (error) {\n    // do nothing\n  }\n\n  return adapter\n}\n"],"names":["asyncStorage","storage","serialize","JSON","stringify","deserialize","parse","adapter","key","async","item","getItem","undefined","value","setItem","keyArea","error","factory"],"mappings":"aAiBO,SAASA,GAAaC,QAC3BA,EAAOC,UACPA,EAAYC,KAAKC,UAASC,YAC1BA,EAAcF,KAAKG,QAEnB,IAAMC,EAAkCC,IAAiB,CACvDC,YACE,IAAMC,QAAaT,IAAUU,QAAQH,GACrC,OAAgB,OAATE,OAAgBE,EAAYP,EAAYK,EAChD,EAEDD,UAAUI,SACFZ,IAAUa,QAAQN,EAAKN,EAAUW,GACzC,IAGF,IACEN,EAAQQ,QAAUd,GACnB,CAAC,MAAOe,GACP,CAGF,OAAOT,CACT,CAxBAP,EAAaiB,SAAU"}